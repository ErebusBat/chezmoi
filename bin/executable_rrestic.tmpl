#!/bin/zsh
set -e
#########################################################################
# Setup / Variables
#########################################################################
REPO=${REPO:-erebusbat_yellowsea}

typeset -A REPO_URLS
REPO_URLS[erebusbat_yellowsea]="rest:http://100.73.19.104:8000/erebusbat"  # 100.73.19.104 = m4mbp.tail04886.ts.net
REPO_URLS[erebusbat_rsyncnet]="sftp://rsyncnet/restic/erebusbat"
REPO_URLS[erebusbat_freenas]="s3:http://nas.erebusbat.net:9000/restic/backrest/erebusbat"
REPO_URLS[scratch]="/scratch/backrest"

#########################################################################
# Console Helpers / Logging
#########################################################################
function cont() {
  echo "[$(date -Iseconds)]          : $*" >&2
}

function info() {
  echo "[$(date -Iseconds)] ***  INFO: $*" >&2
}

function warn() {
  echo "[$(date -Iseconds)] ***  WARN: $*" >&2
}

function err() {
  echo "[$(date -Iseconds)] ***   ERR: $*" >&2
}

function fatal() {
  echo "[$(date -Iseconds)] *** FATAL: $*" >&2
  exit 1
}

#########################################################################
# Setup env based on what was chosen
#########################################################################

if [[ $1 == "sudo" ]]; then
  info "To run under sudo:"
  cont "REPO=scratch sudo -E \$HOME/bin/rrestic snapshots"
  exit 0
fi

# Check to make sure that the given repo actually exists
# or more acuratley that we know about it
info "rrestic - restic wrapper tool"
export RESTIC_REPOSITORY=${REPO_URLS[$REPO]}
if [[ -z $RESTIC_REPOSITORY ]]; then
  fatal "Could not find repository: $REPO"
fi
cont "             REPO=$REPO"
cont "RESIIC_REPOSITORY=$RESTIC_REPOSITORY"

### REPO: erebusbat
info "Setting Repo Password File"
if [[ $REPO == erebusbat_* ]]; then
  export RESTIC_PASSWORD_FILE=~/.restic/.erebusbat.key
fi
if [[ $REPO == "scratch" ]]; then
  export RESTIC_PASSWORD_FILE=~/.restic/.erebusbat.key
fi

### LOC: FreeNAS
if [[ $REPO == *_freenas ]]; then
  info "Detected a MinIO repo... setting access keys"
  # FreeNAS Access Info, Not Host specific
  export AWS_ACCESS_KEY_ID={{- (gopassRaw "restic/FreeNAS_Minio_S3" | mustFromJson).key_id }}
  export AWS_SECRET_ACCESS_KEY={{- (gopassRaw "restic/FreeNAS_Minio_S3" | mustFromJson).secret }}
  info "    AWS_ACCESS_KEY_ID=$AWS_ACCESS_KEY_ID"
  info "AWS_SECRET_ACCESS_KEY=********"
fi

### LOC: rsyncnet
if [[ $REPO == *_rsyncnet ]]; then
  warn "Detected an RSync.net repository; commands will fail if ssh config is wrong!"
fi

### LOC: yellowsea
if [[ $REPO == *_yellowsea ]]; then
  info "Detected a restic-rest repo..."
  export RESTIC_REST_USERNAME={{ .chezmoi.hostname }}
  export RESTIC_REST_PASSWORD="{{- ( index (gopassRaw "restic/rest_server" | mustFromJson) .chezmoi.hostname ) }}"
  cont "RESTIC_REST_USERNAME=$RESTIC_REST_USERNAME"

  # Password Sanity Check; blank OR no value returned from mustFromJson
  if [[ -z $RESTIC_REST_PASSWORD || $RESTIC_REST_PASSWORD == "<no value>" ]]; then
    fatal "No password set for $RESTIC_REST_USERNAME!  Did we not have an entry?"
  else
    cont "RESTIC_REST_PASSWORD=********"
  fi
fi

### LOC: scratch
if [[ $REPO == scratch ]]; then
  if [[ "{{ .chezmoi.hostname }}" != "nuc01" ]]; then
    fatal "scratch repository only works on nuc01 / plex!"
  fi
fi

### Sanity Check
if [[ -z $RESTIC_PASSWORD_FILE ]]; then
  fatal "Password file not set, unknown repo?"
fi
if [[ ! -s $RESTIC_PASSWORD_FILE ]]; then
  fatal "Could not find password file: $RESTIC_PASSWORD_FILE"
fi

#########################################################################
# Run Command
#########################################################################
if ! command -v restic >/dev/null; then
  warn "restic command not found on path?"
  cont "attempting to find it..."

  if [[ -x /home/aburns/bin/restic ]]; then
    export PATH=/home/aburns/bin
  fi
fi
restic --no-lock $*
